#!/bin/bash

i=0
status=
ga=distribute.sh
tmp_project=$(mktemp -d)

#######################################
## Param validation
#######################################
correct_ns="umiami"
#######################################
: $((i++))
start "help"
  debug "$ga --help"
  assert_equal "$status" 0
  assert_startwith "${outlines[0]}" "DESCRIPTION"
  assert_startwith "${outlines[1]}" "      This script reads USERNAMES from stdin using IFS."
end
#######################################
: $((i++))
start "missing remote namespace"
  debug "echo 'user1' | $ga"
  assert_equal "$status" 2
  assert_startwith "${errlines[0]}" "Validating arguments ... Missing argument REMOTE_NAMESPACE."
end
#######################################
# : $((i++))
# skip "missing users: not working on gh actions"
  # debug "$ga '$correct_ns'"
  # assert_equal "$status" 2
  # assert_startwith "${errlines[0]}" "EXCEPTION: Missing stdin"
# end
#######################################
# : $((i++))
# skip "invalid users"
#   debug "echo 'a' | $ga '$correct_ns' '$tmp_project'"
#   assert_equal "$status" 2
#   assert_startwith "${errlines[0]}" "EXCEPTION: Unsupported user format, value 'a'"
#   debug "echo 'aaaaaa
#   b' | $ga '$correct_ns' '$tmp_project'"
#   assert_equal "$status" 2
#   assert_startwith "${errlines[0]}" "EXCEPTION: Unsupported user format, value 'b'"
# end
#######################################
: $((i++))
start "invalid remote namespace format"
  debug "echo 'user1' | $ga '1' '$tmp_project'"
  assert_equal "$status" 2
  assert_startwith "${errlines[0]}" "Validating arguments ... Invalid argument REMOTE_NAMESPACE."
end
#######################################
: $((i++))
start "missing root namespace"
  debug "echo 'user1' | $ga 'xyz123xyz' '$tmp_project'"
  assert_equal "$status" 1
  assert_startwith "${errlines[2]}" "Processing repository for user1 ... Root group xyz123xyz does not exist."
end
#######################################
: $((i++))
start "invalid project path"
  debug "echo 'user1' | $ga '$correct_ns' -d '/foo'"
  assert_equal "$status" 1
  assert_startwith "${errlines[0]}" "Validating arguments ... Project folder not found."
end
#######################################
## Requirements
#######################################
: $((i++))
skip "missing jq"
: $((i++))
skip "missing git"
#######################################

rmdir "$tmp_project"
